# frozen_string_literal: true

class FileExports::Worker < ApplicationJob
  attr_reader :user

  def perform(options)
    user = options.fetch(:user)

    return if user.email.blank?

    key = External::S3Api.put_object(
      bucket: :exports,
      key: External::S3Api.generate_key,
      body: file_content(options),
      content_type: file_content_type(options),
    )

    export = FileExport.create!(
      user: user,
      file_name: file_name(options),
      file_key: key,
      note: note(options),
    )

    FileExportMailer.export_was_generated(
      export: export,
      subject: mail_subject(options),
      message: mail_message(options),
    ).deliver_now
  end

  private

  def file_name(_options)
    raise NotImplementedError
  end

  def file_content_type(_options)
    raise NotImplementedError
  end

  def file_content(_options)
    raise NotImplementedError
  end

  def mail_subject(_options)
    raise NotImplementedError
  end

  def mail_message(_options)
    raise NotImplementedError
  end

  def note(_options)
    "Generated by #{ self.class.name }"
  end
end
